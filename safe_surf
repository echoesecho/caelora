<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SafeSurf - Website Safety Checker</title>
    <style>
        :root {
            --safe-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --primary-color: #3498db;
            --dark-color: #2c3e50;
            --light-color: #ecf0f1;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
            margin: 0;
            padding: 0;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        header {
            text-align: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #ddd;
        }
        
        h1 {
            color: var(--dark-color);
            margin-bottom: 0.5rem;
        }
        
        .subtitle {
            color: #7f8c8d;
            font-size: 1.1rem;
        }
        
        .checker-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .input-group {
            display: flex;
            margin-bottom: 1rem;
        }
        
        #url-input {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 1rem;
        }
        
        #check-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0 1.5rem;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        
        #check-btn:hover {
            background-color: #2980b9;
        }
        
        .results {
            display: none;
            margin-top: 2rem;
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .result-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .verdict {
            font-size: 1.5rem;
            font-weight: 700;
            margin-right: 1rem;
        }
        
        .verdict.safe {
            color: var(--safe-color);
        }
        
        .verdict.warning {
            color: var(--warning-color);
        }
        
        .verdict.danger {
            color: var(--danger-color);
        }
        
        .confidence-meter {
            flex-grow: 1;
            height: 10px;
            background-color: #eee;
            border-radius: 5px;
            overflow: hidden;
            margin: 0 1rem;
        }
        
        .confidence-level {
            height: 100%;
            width: 0%;
            transition: width 0.5s ease-in-out;
        }
        
        .confidence-safe {
            background-color: var(--safe-color);
        }
        
        .confidence-warning {
            background-color: var(--warning-color);
        }
        
        .confidence-danger {
            background-color: var(--danger-color);
        }
        
        .confidence-percent {
            font-weight: 600;
            min-width: 50px;
            text-align: right;
        }
        
        .details {
            margin-top: 1.5rem;
        }
        
        .detail-card {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 4px;
        }
        
        .threats {
            background-color: #fef2f2;
            border-left: 4px solid var(--danger-color);
        }
        
        .warnings {
            background-color: #fff8e6;
            border-left: 4px solid var(--warning-color);
        }
        
        .positive {
            background-color: #f0fdf4;
            border-left: 4px solid var(--safe-color);
        }
        
        .detail-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }
        
        .loading {
            display: none;
            text-align: center;
            margin: 2rem 0;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid var(--primary-color);
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .history {
            margin-top: 2rem;
        }
        
        .history-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem;
            border-bottom: 1px solid #eee;
        }
        
        .history-item:last-child {
            border-bottom: none;
        }
        
        .history-url {
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-right: 1rem;
        }
        
        .history-status {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 600;
        }
        
        .status-safe {
            background-color: #dcfce7;
            color: var(--safe-color);
        }
        
        .status-warning {
            background-color: #fef9c3;
            color: var(--warning-color);
        }
        
        .status-danger {
            background-color: #fee2e2;
            color: var(--danger-color);
        }
        
        footer {
            text-align: center;
            margin-top: 3rem;
            color: #7f8c8d;
            font-size: 0.9rem;
            padding: 1rem;
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 1rem;
            }
            
            .input-group {
                flex-direction: column;
            }
            
            #url-input {
                border-radius: 4px;
                margin-bottom: 0.5rem;
            }
            
            #check-btn {
                border-radius: 4px;
                padding: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>SafeSurf</h1>
            <p class="subtitle">Check if a website is safe before visiting</p>
        </header>
        
        <div class="checker-card">
            <div class="input-group">
                <input type="url" id="url-input" placeholder="Enter URL to check (e.g., https://example.com)" autocomplete="off">
                <button id="check-btn">Check Safety</button>
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Analyzing website safety...</p>
            </div>
            
            <div class="results" id="results">
                <div class="result-header">
                    <div class="verdict" id="verdict">Safe to Browse</div>
                    <div class="confidence-meter">
                        <div class="confidence-level" id="confidence-level"></div>
                    </div>
                    <div class="confidence-percent" id="confidence-percent">95%</div>
                </div>
                
                <div class="details">
                    <div class="detail-card threats" id="threats-card">
                        <div class="detail-title">
                            <span style="margin-right: 8px;">‚ö†Ô∏è</span> Potential Threats Detected
                        </div>
                        <div id="threats-list"></div>
                    </div>
                    
                    <div class="detail-card warnings" id="warnings-card">
                        <div class="detail-title">
                            <span style="margin-right: 8px;">üîç</span> Safety Warnings
                        </div>
                        <div id="warnings-list"></div>
                    </div>
                    
                    <div class="detail-card positive" id="positive-card">
                        <div class="detail-title">
                            <span style="margin-right: 8px;">‚úÖ</span> Positive Indicators
                        </div>
                        <div id="positive-list"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="history" id="history">
            <h3>Recent Checks</h3>
            <div id="history-list"></div>
        </div>
        
        <footer>
            <p>SafeSurf uses AI to analyze website safety. Always use caution when browsing and protect your personal information.</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const urlInput = document.getElementById('url-input');
            const checkBtn = document.getElementById('check-btn');
            const loading = document.getElementById('loading');
            const results = document.getElementById('results');
            const verdict = document.getElementById('verdict');
            const confidenceLevel = document.getElementById('confidence-level');
            const confidencePercent = document.getElementById('confidence-percent');
            const threatsList = document.getElementById('threats-list');
            const warningsList = document.getElementById('warnings-list');
            const positiveList = document.getElementById('positive-list');
            const threatsCard = document.getElementById('threats-card');
            const warningsCard = document.getElementById('warnings-card');
            const positiveCard = document.getElementById('positive-card');
            const historyList = document.getElementById('history-list');
            
            // Load check history from localStorage
            let checkHistory = JSON.parse(localStorage.getItem('safeSurfHistory')) || [];
            renderHistory();
            
            checkBtn.addEventListener('click', checkUrl);
            urlInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') checkUrl();
            });
            
            function checkUrl() {
                let url = urlInput.value.trim();
                
                if (!url) {
                    alert('Please enter a URL to check');
                    return;
                }
                
                // Add https:// if missing
                if (!url.startsWith('http://') && !url.startsWith('https://')) {
                    url = 'https://' + url;
                }
                
                try {
                    // Validate URL
                    new URL(url);
                } catch (e) {
                    alert('Please enter a valid URL (e.g., https://example.com)');
                    return;
                }
                
                // Show loading state
                loading.style.display = 'block';
                results.style.display = 'none';
                
                // Simulate API call (in production, replace with real API)
                setTimeout(() => {
                    const result = analyzeWebsite(url);
                    displayResults(result);
                    
                    // Add to history
                    checkHistory.unshift({
                        url: url,
                        verdict: result.verdict,
                        confidence: result.confidence,
                        timestamp: new Date().toISOString()
                    });
                    
                    // Keep only last 5 items
                    if (checkHistory.length > 5) {
                        checkHistory = checkHistory.slice(0, 5);
                    }
                    
                    // Save to localStorage
                    localStorage.setItem('safeSurfHistory', JSON.stringify(checkHistory));
                    renderHistory();
                    
                    // Hide loading, show results
                    loading.style.display = 'none';
                    results.style.display = 'block';
                }, 2000);
            }
            
            function analyzeWebsite(url) {
                // This is a simulated analysis - in production you would call a real API
                const domain = new URL(url).hostname;
                let threats = [];
                let warnings = [];
                let positives = [];
                let score = 100; // Start with perfect score, deduct for issues
                
                // Simulate threat detection based on domain patterns
                if (domain.match(/free|gift|prize|win/i)) {
                    threats.push("Website domain suggests giveaways/scams");
                    score -= 30;
                }
                
                if (domain.match(/login|account|verify/i)) {
                    threats.push("Domain mimics legitimate login pages (could be phishing)");
                    score -= 25;
                }
                
                if (domain.match(/\d{3,}/)) { // Multiple numbers in domain
                    threats.push("Numerical domains are often used by malicious sites");
                    score -= 15;
                }
                
                // Simulate warnings
                if (domain.match(/blog|forum|user-content/i)) {
                    warnings.push("User-generated content may contain unsafe material");
                    score -= 10;
                }
                
                if (!domain.match(/\.com$|\.org$|\.net$/i)) {
                    warnings.push("Uncommon top-level domain - exercise caution");
                    score -= 5;
                }
                
                // Simulate positive indicators
                if (domain.match(/google|microsoft|amazon|wikipedia|github/i)) {
                    positives.push("Recognized reputable organization");
                    score += 20;
                }
                
                if (domain.match(/^https:\/\//i)) {
                    positives.push("Secure HTTPS connection");
                    score += 10;
                }
                
                // Ensure score is within bounds
                score = Math.max(0, Math.min(100, score));
                
                // Determine verdict
                let verdict;
                let confidenceClass;
                
                if (score >= 80) {
                    verdict = "Safe to Browse";
                    confidenceClass = "confidence-safe";
                } else if (score >= 50) {
                    verdict = "Use Caution";
                    confidenceClass = "confidence-warning";
                } else {
                    verdict = "High Risk";
                    confidenceClass = "confidence-danger";
                }
                
                return {
                    url,
                    verdict,
                    confidence: score,
                    confidenceClass,
                    threats,
                    warnings,
                    positives,
                    isSafe: score >= 70
                };
            }
            
            function displayResults(result) {
                // Set verdict and confidence
                verdict.textContent = result.verdict;
                verdict.className = "verdict " + 
                    (result.isSafe ? "safe" : 
                    (result.confidence >= 50 ? "warning" : "danger"));
                
                confidenceLevel.style.width = `${result.confidence}%`;
                confidenceLevel.className = "confidence-level " + result.confidenceClass;
                confidencePercent.textContent = `${result.confidence}%`;
                
                // Clear previous results
                threatsList.innerHTML = '';
                warningsList.innerHTML = '';
                positiveList.innerHTML = '';
                
                // Add threats
                if (result.threats.length > 0) {
                    result.threats.forEach(threat => {
                        const item = document.createElement('div');
                        item.textContent = threat;
                        item.style.marginBottom = '0.5rem';
                        threatsList.appendChild(item);
                    });
                } else {
                    threatsList.innerHTML = '<div>No critical threats detected</div>';
                }
                
                // Add warnings
                if (result.warnings.length > 0) {
                    result.warnings.forEach(warning => {
                        const item = document.createElement('div');
                        item.textContent = warning;
                        item.style.marginBottom = '0.5rem';
                        warningsList.appendChild(item);
                    });
                } else {
                    warningsList.innerHTML = '<div>No significant warnings</div>';
                }
                
                // Add positive indicators
                if (result.positives.length > 0) {
                    result.positives.forEach(positive => {
                        const item = document.createElement('div');
                        item.textContent = positive;
                        item.style.marginBottom = '0.5rem';
                        positiveList.appendChild(item);
                    });
                } else {
                    positiveList.innerHTML = '<div>No notable positive indicators</div>';
                }
                
                // Hide empty sections
                threatsCard.style.display = result.threats.length > 0 ? 'block' : 'none';
                warningsCard.style.display = result.warnings.length > 0 ? 'block' : 'none';
                positiveCard.style.display = result.positives.length > 0 ? 'block' : 'none';
            }
            
            function renderHistory() {
                historyList.innerHTML = '';
                
                if (checkHistory.length === 0) {
                    historyList.innerHTML = '<p>No recent checks</p>';
                    return;
                }
                
                checkHistory.forEach(item => {
                    const historyItem = document.createElement('div');
                    historyItem.className = 'history-item';
                    
                    const url = document.createElement('div');
                    url.className = 'history-url';
                    url.textContent = item.url;
                    
                    const status = document.createElement('div');
                    status.className = 'history-status ' + 
                        (item.confidence >= 80 ? 'status-safe' : 
                         (item.confidence >= 50 ? 'status-warning' : 'status-danger'));
                    status.textContent = item.verdict;
                    
                    historyItem.appendChild(url);
                    historyItem.appendChild(status);
                    historyList.appendChild(historyItem);
                    
                    // Make clickable to re-check
                    historyItem.style.cursor = 'pointer';
                    historyItem.addEventListener('click', () => {
                        urlInput.value = item.url;
                        checkUrl();
                    });
                });
            }
        });
    </script>
</body>
</html>